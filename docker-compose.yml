# Usage
#   Start:                      docker compose -f docker-compose.yml -f supabase/docker-compose.yml up -d
#         -> Reset database:    sudo rm -rf supabase/volumes/db/data
#   Stop:                       docker compose -f docker-compose.yml -f supabase/docker-compose.yml down -d

name: Coffee_Shop_Manager

services:
  frontend:
    container_name: react-frontend
    build:
      context: ./koffieblik
    ports:
      - "3000:3000"
    volumes:
      - ./koffieblik:/app
      - /app/node_modules
    working_dir: /app
    environment:
      - NODE_ENV=development
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=coffee_shop_db
    depends_on:
      - db
    command: npm run dev

#   db:
#     container_name: supabase-db
#     image: supabase/postgres:15.8.1.060
#     restart: unless-stopped
#     volumes:
#       - ./supabase/volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
#       # Must be superuser to create event trigger
#       - ./supabase/volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
#       # Must be superuser to alter reserved role
#       - ./supabase/volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
#       # Initialize the database settings with JWT_SECRET and JWT_EXP
#       - ./supabase/volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
#       # PGDATA directory is persisted between restarts
#       - ./supabase/volumes/db/data:/var/lib/postgresql/data:Z
#       # Changes required for internal supabase data such as _analytics
#       - ./supabase/volumes/db/_supabase.sql:/docker-entrypoint-initdb.d/migrations/97-_supabase.sql:Z
#       # Changes required for Analytics support
#       - ./supabase/volumes/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
#       # Changes required for Pooler support
#       - ./supabase/volumes/db/pooler.sql:/docker-entrypoint-initdb.d/migrations/99-pooler.sql:Z
#       # Use named volume to persist pgsodium decryption key between restarts
#       - db-config:/etc/postgresql-custom
#       # Use data.sql to set up db
#       - ./supabase/volumes/db/init/data.sql:/docker-entrypoint-initdb.d/seed.sql
#     healthcheck:
#       test:
#         [
#         "CMD",
#         "pg_isready",
#         "-U",
#         "postgres",
#         "-h",
#         "localhost"
#         ]
#       interval: 5s
#       timeout: 5s
#       retries: 10
#     # depends_on:
#       # vector:
#         # condition: service_healthy
#     environment:
#       POSTGRES_HOST: /var/run/postgresql
#       PGPORT: ${POSTGRES_PORT}
#       POSTGRES_PORT: ${POSTGRES_PORT}
#       PGPASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       PGDATABASE: ${POSTGRES_DB}
#       POSTGRES_DB: ${POSTGRES_DB}
#       JWT_SECRET: ${JWT_SECRET}
#       JWT_EXP: ${JWT_EXPIRY}
#     command:
#       [
#         "postgres",
#         "-c",
#         "config_file=/etc/postgresql/postgresql.conf",
#         "-c",
#         "log_min_messages=fatal" # prevents Realtime polling queries from appearing in logs
#       ]

#   auth:
#     container_name: supabase-auth
#     image: supabase/gotrue:v2.172.1
#     restart: unless-stopped
#     healthcheck:
#       test:
#         [
#           "CMD",
#           "wget",
#           "--no-verbose",
#           "--tries=1",
#           "--spider",
#           "http://localhost:9999/health"
#         ]
#       timeout: 5s
#       interval: 5s
#       retries: 3
#     depends_on:
#       db:
#         # Disable this if you are using an external Postgres database
#         condition: service_healthy
#       # analytics:
#         # condition: service_healthy
#     environment:
#       GOTRUE_API_HOST: 0.0.0.0
#       GOTRUE_API_PORT: 9999
#       API_EXTERNAL_URL: ${API_EXTERNAL_URL}

#       GOTRUE_DB_DRIVER: postgres
#       GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

#       GOTRUE_SITE_URL: ${SITE_URL}
#       GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
#       GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}

#       GOTRUE_JWT_ADMIN_ROLES: service_role
#       GOTRUE_JWT_AUD: authenticated
#       GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
#       GOTRUE_JWT_EXP: ${JWT_EXPIRY}
#       GOTRUE_JWT_SECRET: ${JWT_SECRET}

#       GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
#       GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: ${ENABLE_ANONYMOUS_USERS}
#       GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}

#       # Uncomment to bypass nonce check in ID Token flow. Commonly set to true when using Google Sign In on mobile.
#       # GOTRUE_EXTERNAL_SKIP_NONCE_CHECK: true

#       # GOTRUE_MAILER_SECURE_EMAIL_CHANGE_ENABLED: true
#       # GOTRUE_SMTP_MAX_FREQUENCY: 1s
#       GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
#       GOTRUE_SMTP_HOST: ${SMTP_HOST}
#       GOTRUE_SMTP_PORT: ${SMTP_PORT}
#       GOTRUE_SMTP_USER: ${SMTP_USER}
#       GOTRUE_SMTP_PASS: ${SMTP_PASS}
#       GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
#       GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}
#       GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}
#       GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}
#       GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}

#       GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
#       GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}
#       # Uncomment to enable custom access token hook. Please see: https://supabase.com/docs/guides/auth/auth-hooks for full list of hooks and additional details about custom_access_token_hook

#       # GOTRUE_HOOK_CUSTOM_ACCESS_TOKEN_ENABLED: "true"
#       # GOTRUE_HOOK_CUSTOM_ACCESS_TOKEN_URI: "pg-functions://postgres/public/custom_access_token_hook"
#       # GOTRUE_HOOK_CUSTOM_ACCESS_TOKEN_SECRETS: "<standard-base64-secret>"

#       # GOTRUE_HOOK_MFA_VERIFICATION_ATTEMPT_ENABLED: "true"
#       # GOTRUE_HOOK_MFA_VERIFICATION_ATTEMPT_URI: "pg-functions://postgres/public/mfa_verification_attempt"

#       # GOTRUE_HOOK_PASSWORD_VERIFICATION_ATTEMPT_ENABLED: "true"
#       # GOTRUE_HOOK_PASSWORD_VERIFICATION_ATTEMPT_URI: "pg-functions://postgres/public/password_verification_attempt"

#       # GOTRUE_HOOK_SEND_SMS_ENABLED: "false"
#       # GOTRUE_HOOK_SEND_SMS_URI: "pg-functions://postgres/public/custom_access_token_hook"
#       # GOTRUE_HOOK_SEND_SMS_SECRETS: "v1,whsec_VGhpcyBpcyBhbiBleGFtcGxlIG9mIGEgc2hvcnRlciBCYXNlNjQgc3RyaW5n"

#       # GOTRUE_HOOK_SEND_EMAIL_ENABLED: "false"
#       # GOTRUE_HOOK_SEND_EMAIL_URI: "http://host.docker.internal:54321/functions/v1/email_sender"
#       # GOTRUE_HOOK_SEND_EMAIL_SECRETS: "v1,whsec_VGhpcyBpcyBhbiBleGFtcGxlIG9mIGEgc2hvcnRlciBCYXNlNjQgc3RyaW5n"

#   studio:
#     container_name: supabase-studio
#     image: supabase/studio:2025.05.19-sha-3487831
#     restart: unless-stopped
#     healthcheck:
#       test:
#         [
#           "CMD",
#           "node",
#           "-e",
#           "fetch('http://studio:3000/api/platform/profile').then((r) => {if (r.status !== 200) throw new Error(r.status)})"
#         ]
#       timeout: 10s
#       interval: 5s
#       retries: 3
#     # depends_on:
#       # analytics:
#         # condition: service_healthy
#     environment:
#       STUDIO_PG_META_URL: http://meta:8080
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

#       DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION}
#       DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT}
#       OPENAI_API_KEY: ${OPENAI_API_KEY:-}

#       SUPABASE_URL: http://kong:8000
#       SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL}
#       SUPABASE_ANON_KEY: ${ANON_KEY}
#       SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
#       AUTH_JWT_SECRET: ${JWT_SECRET}

#       LOGFLARE_API_KEY: ${LOGFLARE_API_KEY}
#       LOGFLARE_URL: http://analytics:4000
#       NEXT_PUBLIC_ENABLE_LOGS: true
#       # Comment to use Big Query backend for analytics
#       NEXT_ANALYTICS_BACKEND_PROVIDER: postgres
#       # Uncomment to use Big Query backend for analytics
#       # NEXT_ANALYTICS_BACKEND_PROVIDER: bigquery

#   kong:
#     container_name: supabase-kong
#     image: kong:2.8.1
#     restart: unless-stopped
#     ports:
#       - ${KONG_HTTP_PORT}:8000/tcp
#       - ${KONG_HTTPS_PORT}:8443/tcp
#     volumes:
#       # https://github.com/supabase/supabase/issues/12661
#       - ./volumes/api/kong.yml:/home/kong/temp.yml:ro,z
#     # depends_on:
#       # analytics:
#         # condition: service_healthy
#     environment:
#       KONG_DATABASE: "off"
#       KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
#       # https://github.com/supabase/cli/issues/14
#       KONG_DNS_ORDER: LAST,A,CNAME
#       KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
#       KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
#       KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
#       SUPABASE_ANON_KEY: ${ANON_KEY}
#       SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
#       DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
#       DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
#     # https://unix.stackexchange.com/a/294837
#     entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'

# volumes:
#   db-config: