{
	"info": {
		"_postman_id": "90e096f7-4675-4ca2-83ca-3301ef643651",
		"name": "API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34354291",
		"_collection_link": "https://die-koffieblik.postman.co/workspace/Die-Koffieblik~c9f6be95-2b19-4001-bea2-c02e89bf2086/collection/34354291-90e096f7-4675-4ca2-83ca-3301ef643651?action=share&source=collection_link&creator=34354291"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has success, user info\", function () {\r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data).to.have.property(\"success\");\r",
									"    pm.expect(data).to.have.property(\"user\");\r",
									"});\r",
									"\r",
									"pm.test(\"Sucess is true\", function () {\r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data.success).to.eql(\"true\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user@coffee.com\",\r\n  \"password\": \"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/login",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"newuser\",\r\n    \"email\" : \"new@user.com\",\r\n    \"password\" : \"P@ssword1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/signup",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stock",
			"item": [
				{
					"name": "Create Stock",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"item\": \"Cream\",\r\n    \"quantity\": 100,\r\n    \"unit_type\": \"kg\",\r\n    \"max_capacity\": 200,\r\n    \"reserved_quantity\": 10\r\n  },\r\n  {\r\n    \"item\": \"Water\",\r\n    \"quantity\": 50,\r\n    \"unit_type\": \"liters\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/stock",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"stock"
							]
						},
						"description": "## Add Stock\n\nAdd stock items.\n\n### Request\n\n**HTTP Method:** POST  \n**Endpoint:** `/stock`\n\n**Request Body Parameters:**\n\nItems need to be passed in as an array \\[...\\]. Add any parameters to be updated along with its updated value.\n\n- **item** (string): The name of the item to be added.\n    \n- **quantity** (decimal): The quantity of the item being added.\n    \n- **unit_type** (string): The unit type for the quantity.\n    \n- **max_capacity** (decimal): The maximum capacity for the stock item.\n    \n- **reserved_quantity** (decimal): Quantity that is reserved by an order. \\[optional\\]"
					},
					"response": []
				},
				{
					"name": "Update Stock ID",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 120,\r\n  \"reserved_quantity\": 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/stock/2dd699a6-70ba-4bb9-86f0-a7b5a1a4246a",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"stock",
								"2dd699a6-70ba-4bb9-86f0-a7b5a1a4246a"
							]
						},
						"description": "## Update Stock by ID\n\nUpdate a stock item identified by its ID.\n\n### Request\n\n**HTTP Method:** PUT  \n**Endpoint:** `/stock/{ID}`\n\n**Request Body Parameters:**\n\nAdd any parameters to be updated along with its updated value.\n\n- **quantity** (decimal): The available quantity of the item.\n    \n- **unit_type** (string): The unit type for the quantity.\n    \n- **max_capacity** (decimal): The maximum capacity for the stock item.\n    \n- **reserved_quantity** (decimal): Quantity that is reserved by an order."
					},
					"response": []
				},
				{
					"name": "Update Stock Name",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\": \"Coffee Beans\",\r\n  \"quantity\": 200,\r\n  \"reserved_quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/stock",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"stock"
							]
						},
						"description": "## Update Stock by Name\n\nUpdate a stock item identified by its name in the request body.\n\n### Request\n\n**HTTP Method:** PUT  \n**Endpoint:** `/stock`\n\n**Request Body Parameters:**\n\nAdd any parameters to be updated along with its updated value. The item or id field is required.\n\n- **item** (string): The name of the item to be added.\n    \n- **id** (string): Unique id of item.\n    \n- **quantity** (decimal): The quantity of the item being added.\n    \n- **unit_type** (string): The unit type for the quantity.\n    \n- **max_capacity** (decimal): The maximum capacity for the stock item.\n    \n- **reserved_quantity** (decimal): Quantity that is reserved by an order. \\[optional\\]"
					},
					"response": []
				},
				{
					"name": "Update Stock Batch",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"item\": \"Coffee Beans\",\r\n    \"fields\": {\r\n      \"quantity\": 95\r\n    }\r\n  },\r\n  {\r\n    \"item\": \"Milk\",\r\n    \"fields\": {\r\n      \"max_capacity\": 300\r\n    }\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/stock/batch",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"stock",
								"batch"
							]
						},
						"description": "## Update Stock Batch\n\nUpdate multiple stock items identified by its name in the request body.\n\n### Request\n\n**HTTP Method:** PUT  \n**Endpoint:** `/stock/batch`\n\n**Request Body Parameters:**\n\nItems need to be passed in as an array \\[...\\] each item contains the below properties. The item or id field is required.\n\n- **item** (string): The name of the item to be added.\n    \n- **id** (string): Unique id of item.\n    \n- **quantity** (decimal): The quantity of the item being added.\n    \n- **unit_type** (string): The unit type for the quantity.\n    \n- **max_capacity** (decimal): The maximum capacity for the stock item.\n    \n- **reserved_quantity** (decimal): Quantity that is reserved by an order. \\[optional\\]"
					},
					"response": []
				},
				{
					"name": "Get Stock",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}:{{PORT}}/stock",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"stock"
							]
						},
						"description": "## Update Stock Batch\n\nRetreive all stock items.\n\n### Request\n\n**HTTP Method:** GET  \n**Endpoint:** `/stock`"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const SUPABASE_URL = pm.environment.get('SUPABASE_URL');\r",
							"const SUPABASE_ANON_KEY = pm.environment.get('SUPABASE_ANON_KEY');\r",
							"const EMAIL = pm.environment.get('SUPABASE_EMAIL');\r",
							"const PASSWORD = pm.environment.get('SUPABASE_PASSWORD');\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${SUPABASE_URL}/auth/v1/token?grant_type=password`,\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"        'apikey': SUPABASE_ANON_KEY\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            email: EMAIL,\r",
							"            password: PASSWORD\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err || res.code !== 200) {\r",
							"        console.error('Token request failed', err || res.json());\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    const token = res.json().access_token;\r",
							"    pm.environment.set('TOKEN', token);\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"products\": [\r\n    {\r\n      \"product\": \"Ice Coffee\",\r\n      \"quantity\": 1,\r\n      \"custom\": { \"note\": \"Put milk before hot water\" }\r\n    },\r\n    {\r\n      \"product\": \"Ice Coffee\",\r\n      \"quantity\": 1,\r\n      \"modifications\": [\r\n        { \"stock_item\": \"Sugar\", \"action\": \"remove\", \"quantity\": 5 },\r\n        { \"stock_item\": \"Milk\", \"action\": \"add\", \"quantity\": 10 }\r\n      ]\r\n    },\r\n    {\r\n      \"product\": \"Latte\",\r\n      \"quantity\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/order",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}:{{PORT}}/order",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"order"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Legacy",
			"item": [
				{
					"name": "Update Stock",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"updates\": [\r\n    {\r\n      \"item\": \"Coffee Beans\",\r\n      \"fields\": {\r\n        \"quantity\": 55,\r\n        \"reserved_quantity\": 10\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"8a0e4334-e1be-40df-8a42-f297fd0d9fc0\",\r\n      \"fields\": {\r\n        \"quantity\": 50\r\n      }\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/update_stock",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"update_stock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Stock",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}:{{PORT}}/get_stock",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"get_stock"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Create Product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Drink\",\r\n  \"description\": \"A refreshing new beverage.\",\r\n  \"price\": 40.00,\r\n  \"stock_quantity\": 50,\r\n  \"stock_items\": [\r\n    { \"item\": \"Coffee Beans\", \"quantity\": 8 },\r\n    { \"item\": \"Sugar\", \"quantity\": 5 }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/product",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}:{{PORT}}/product",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products With Stock",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}:{{PORT}}/product/stock",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"product",
								"stock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"product\": \"Ice Coffee\", \r\n  \"updates\": {\r\n    \"name\": \"Iced Coffee\", \r\n    \"price\": 35.00,\r\n    \"stock_quantity\": 15\r\n  },\r\n  \"ingredients\": [\r\n    { \"stock_item\": \"Milk\", \"quantity\": 2 },\r\n    { \"stock_item\": \"Sugar\", \"quantity\": 4 }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}:{{PORT}}/product",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"product"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is valid\", () => {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.have.property(\"message\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}:{{PORT}}/",
					"host": [
						"{{URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						""
					]
				},
				"description": "Does stuff"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const SUPABASE_URL = pm.environment.get('SUPABASE_URL');\r",
					"const SUPABASE_ANON_KEY = pm.environment.get('SUPABASE_ANON_KEY');\r",
					"const EMAIL = pm.environment.get('SUPABASE_EMAIL');\r",
					"const PASSWORD = pm.environment.get('SUPABASE_PASSWORD');\r",
					"\r",
					"console.log('Starting login request as: ', EMAIL);\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: `${SUPABASE_URL}/auth/v1/token?grant_type=password`,\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/json',\r",
					"        'apikey': SUPABASE_ANON_KEY\r",
					"    },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify({\r",
					"            email: EMAIL,\r",
					"            password: PASSWORD\r",
					"        })\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err || res.code !== 200) {\r",
					"        console.error('Token request failed', err || res.json());\r",
					"        return;\r",
					"    }\r",
					"\r",
					"    const token = res.json().access_token;\r",
					"    pm.environment.set('TOKEN', token);\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}